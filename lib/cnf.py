# -*- encoding: utf-8 -*-

#######################################################################################################################
# DESCRIPTION:
#######################################################################################################################

# TODO

#######################################################################################################################
# AUTHORS:
#######################################################################################################################

# Carlos Serrada, 13-11347, <cserradag96@gmail.com>
# Juan Ortiz, 13-11021 <ortiz.juan14@gmail.com>

#######################################################################################################################
# CLASS DECLARATION:
#######################################################################################################################

class CNF:
    def __init__(self, size):
        self.variables = size ** 2
        self.clauses = []

    def add(self, clause):
        self.clauses.append(clause)

    def parse(self, file_path):
        variables = []
        with open(file_path) as file:
            for index, line in enumerate(file):
                if index == 1:
                    variables = [x > 0 for x in list(map(int, line.split(' ')))[:-1]]
        return variables

    def __str__(self):
        header = "p cnf " + str(self.variables) + " " + str(len(self.clauses)) + "\n"
        cnf = " 0\n".join([" ".join(list(map(str, clause.terms))) for clause in self.clauses])
        return header + cnf + " 0\n"

#######################################################################################################################
# :)
#######################################################################################################################
